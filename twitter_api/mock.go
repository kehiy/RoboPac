// Code generated by MockGen. DO NOT EDIT.
// Source: ./twitter_api/interface.go
//
// Generated by this command:
//
//	mockgen -source=./twitter_api/interface.go -destination=./twitter_api/mock.go -package=twitter_api
//

// Package twitter_api is a generated GoMock package.
package twitter_api

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIClient is a mock of IClient interface.
type MockIClient struct {
	ctrl     *gomock.Controller
	recorder *MockIClientMockRecorder
}

// MockIClientMockRecorder is the mock recorder for MockIClient.
type MockIClientMockRecorder struct {
	mock *MockIClient
}

// NewMockIClient creates a new mock instance.
func NewMockIClient(ctrl *gomock.Controller) *MockIClient {
	mock := &MockIClient{ctrl: ctrl}
	mock.recorder = &MockIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClient) EXPECT() *MockIClientMockRecorder {
	return m.recorder
}

// RetweetSearch mocks base method.
func (m *MockIClient) RetweetSearch(ctx context.Context, hashtag, username string) (*TweetInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetweetSearch", ctx, hashtag, username)
	ret0, _ := ret[0].(*TweetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetweetSearch indicates an expected call of RetweetSearch.
func (mr *MockIClientMockRecorder) RetweetSearch(ctx, hashtag, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetweetSearch", reflect.TypeOf((*MockIClient)(nil).RetweetSearch), ctx, hashtag, username)
}

// UserInfo mocks base method.
func (m *MockIClient) UserInfo(ctx context.Context, username string) (*UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserInfo", ctx, username)
	ret0, _ := ret[0].(*UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserInfo indicates an expected call of UserInfo.
func (mr *MockIClientMockRecorder) UserInfo(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserInfo", reflect.TypeOf((*MockIClient)(nil).UserInfo), ctx, username)
}
