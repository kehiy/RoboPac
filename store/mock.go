// Code generated by MockGen. DO NOT EDIT.
// Source: ./store/interface.go
//
// Generated by this command:
//
//	mockgen -source=./store/interface.go -destination=./store/mock.go -package=store
//

// Package store is a generated GoMock package.
package store

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIStore is a mock of IStore interface.
type MockIStore struct {
	ctrl     *gomock.Controller
	recorder *MockIStoreMockRecorder
}

// MockIStoreMockRecorder is the mock recorder for MockIStore.
type MockIStoreMockRecorder struct {
	mock *MockIStore
}

// NewMockIStore creates a new mock instance.
func NewMockIStore(ctrl *gomock.Controller) *MockIStore {
	mock := &MockIStore{ctrl: ctrl}
	mock.recorder = &MockIStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStore) EXPECT() *MockIStoreMockRecorder {
	return m.recorder
}

// AddClaimTransaction mocks base method.
func (m *MockIStore) AddClaimTransaction(testNetValAddr, txID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClaimTransaction", testNetValAddr, txID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClaimTransaction indicates an expected call of AddClaimTransaction.
func (mr *MockIStoreMockRecorder) AddClaimTransaction(testNetValAddr, txID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClaimTransaction", reflect.TypeOf((*MockIStore)(nil).AddClaimTransaction), testNetValAddr, txID)
}

// BoosterStatus mocks base method.
func (m *MockIStore) BoosterStatus() *BoosterStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BoosterStatus")
	ret0, _ := ret[0].(*BoosterStatus)
	return ret0
}

// BoosterStatus indicates an expected call of BoosterStatus.
func (mr *MockIStoreMockRecorder) BoosterStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BoosterStatus", reflect.TypeOf((*MockIStore)(nil).BoosterStatus))
}

// ClaimStatus mocks base method.
func (m *MockIStore) ClaimStatus() *ClaimStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClaimStatus")
	ret0, _ := ret[0].(*ClaimStatus)
	return ret0
}

// ClaimStatus indicates an expected call of ClaimStatus.
func (mr *MockIStoreMockRecorder) ClaimStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimStatus", reflect.TypeOf((*MockIStore)(nil).ClaimStatus))
}

// ClaimerInfo mocks base method.
func (m *MockIStore) ClaimerInfo(testNetValAddr string) *Claimer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClaimerInfo", testNetValAddr)
	ret0, _ := ret[0].(*Claimer)
	return ret0
}

// ClaimerInfo indicates an expected call of ClaimerInfo.
func (mr *MockIStoreMockRecorder) ClaimerInfo(testNetValAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimerInfo", reflect.TypeOf((*MockIStore)(nil).ClaimerInfo), testNetValAddr)
}

// FindTwitterParty mocks base method.
func (m *MockIStore) FindTwitterParty(twitterName string) *TwitterParty {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTwitterParty", twitterName)
	ret0, _ := ret[0].(*TwitterParty)
	return ret0
}

// FindTwitterParty indicates an expected call of FindTwitterParty.
func (mr *MockIStoreMockRecorder) FindTwitterParty(twitterName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTwitterParty", reflect.TypeOf((*MockIStore)(nil).FindTwitterParty), twitterName)
}

// IsWhitelisted mocks base method.
func (m *MockIStore) IsWhitelisted(twitterID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsWhitelisted", twitterID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsWhitelisted indicates an expected call of IsWhitelisted.
func (mr *MockIStoreMockRecorder) IsWhitelisted(twitterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWhitelisted", reflect.TypeOf((*MockIStore)(nil).IsWhitelisted), twitterID)
}

// SaveTwitterParty mocks base method.
func (m *MockIStore) SaveTwitterParty(party *TwitterParty) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTwitterParty", party)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTwitterParty indicates an expected call of SaveTwitterParty.
func (mr *MockIStoreMockRecorder) SaveTwitterParty(party any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTwitterParty", reflect.TypeOf((*MockIStore)(nil).SaveTwitterParty), party)
}

// WhitelistTwitterAccount mocks base method.
func (m *MockIStore) WhitelistTwitterAccount(twitterID, twitterName, authorizedDiscordID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhitelistTwitterAccount", twitterID, twitterName, authorizedDiscordID)
	ret0, _ := ret[0].(error)
	return ret0
}

// WhitelistTwitterAccount indicates an expected call of WhitelistTwitterAccount.
func (mr *MockIStoreMockRecorder) WhitelistTwitterAccount(twitterID, twitterName, authorizedDiscordID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhitelistTwitterAccount", reflect.TypeOf((*MockIStore)(nil).WhitelistTwitterAccount), twitterID, twitterName, authorizedDiscordID)
}
